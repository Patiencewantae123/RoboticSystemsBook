[
  { "type":"multiple-choice",
    "prompt":"What type of constraint is a self-collision constraint for an industrial manipulator?",
    "options":["Local",
               "Differential",
               "Global",
               "None of the above"],
    "feedback":["The constraint must be met at each configuration, and does not depend on the path's derivative.",null,null,null],
    "answer":0
  },
  { "type":"multiple-choice",
    "prompt":"What type of constraint is the requirement that a tracked robot cannot move in the sideways direction?",
    "options":["Local",
               "Differential",
               "Global",
               "None of the above"],
    "feedback":[null,"The constraint imposes a requirement on the path's derivative, so it is differential.",null,null],
    "answer":1
  },
  { "type":"freeform",
    "prompt":"A common strategy for solving mazes is the <i>right hand rule</i>, which states that if you start at a wall and keep following it such that the wall is always to your right, then you will either exit the maze or return to the place that you started.  How might you implement this in a behavior script for a wall-following mobile robot?  Assume that you are able to mark the wall, drop beacons, or otherwise track your position to remember where you have been.",
    "answer":"There are many possible solutions, but here is one.  There are two states. In state 1, the robot moves forward until it hits a wall.  When it hits a wall, it marks its position, and switches to state 2.  In state 2, the robot first checks to see if there is a wall to its right.  If not, it turns to the right until a wall is detected.  If there is a wall and it not a marked position, move forward parallel to the wall.  If the wall is marked, turn to a random direction not facing the wall and switch to state 1."
  }
]